/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ospck;

import javax.swing.JLabel;
import javax.swing.JSpinner;

/**
 *
 * @author QWERTYnfinity
 */
public class Schedule extends javax.swing.JFrame {
    int px = 70,ax = 170,bx = 320;
    int posX, posY; //comment
    int bRand = 50;
    int xy = 150, xx=650;
    int atY=160;
    final int num = 21;
    int y=0,v=0;
    int pNum=0;
    int jakol = 50;
    int timeJ = 30;
    String remain="";
    //MAIN
    int[] proNum = new int[21];
    int[] arrT = new int[21];
    int[] burT = new int[21];
    int[] prioT = new int[21];
    int[] waitT = new int[21];
    int[] compT = new int[21];
    int[] turnT = new int[21];
    boolean[] stat= new boolean[21];
    int[] iburT=new int[21];
    //DUMMY
    int dproNum;
    int darrT;
    int dburT;
    int dprioT;
    int dwaitT;
    int dcompT;
    int dturnT;
    boolean dstat;
    int diburT;
    int totalTurn=0;
    int totalWait=0;
    double aveTurn=0;
    double aveWait=0;
    JLabel[] pLabel = new JLabel[num];
    JLabel schedbg = new JLabel();
    
    //GANTT CHART
    JLabel[] timeLabel = new JLabel[255];
    JLabel[] pickedLabel = new JLabel[255];
    JLabel[] remainLabel = new JLabel[255];
    
    JSpinner[] at=new JSpinner[num];
    JSpinner[] bt=new JSpinner[num];
    JSpinner[] prio=new JSpinner[num];
    /**
     * Creates new form Schedule
     */
    public Schedule() {
        initComponents();
        this.setLocation(100,100);
        this.setSize(xx,xy);
        secondButton.setVisible(false);
        random.setVisible(false);
        randomwAT.setVisible(false);
        randomC.setVisible(false);
        stats.setVisible(false);
        tQuantum.setVisible(false);
        bg();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scheduleType = new javax.swing.JComboBox();
        firstButton = new javax.swing.JButton();
        processNumber = new javax.swing.JSlider();
        secondButton = new javax.swing.JButton();
        randomwAT = new javax.swing.JButton();
        randomC = new javax.swing.JButton();
        random = new javax.swing.JButton();
        stats = new javax.swing.JButton();
        tQuantum = new javax.swing.JSpinner();
        backB = new javax.swing.JLabel();
        minB = new javax.swing.JLabel();
        closeB = new javax.swing.JLabel();
        handle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(null);

        scheduleType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First Come First Serve", "Shortest Job First", "Shortest Remaining Time First", "Non Pre-emptive Priority", "Pre-emptive Priority", "Round Robin" }));
        scheduleType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleTypeActionPerformed(evt);
            }
        });
        getContentPane().add(scheduleType);
        scheduleType.setBounds(40, 40, 400, 20);

        firstButton.setText("OK GOOD");
        firstButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstButtonActionPerformed(evt);
            }
        });
        getContentPane().add(firstButton);
        firstButton.setBounds(450, 40, 140, 23);

        processNumber.setMajorTickSpacing(1);
        processNumber.setMaximum(20);
        processNumber.setMinimum(1);
        processNumber.setMinorTickSpacing(1);
        processNumber.setPaintLabels(true);
        processNumber.setPaintTicks(true);
        processNumber.setSnapToTicks(true);
        processNumber.setToolTipText("Process Numbers Up to 20 Processes Only");
        processNumber.setValue(1);
        getContentPane().add(processNumber);
        processNumber.setBounds(40, 70, 560, 50);

        secondButton.setText("FINISH");
        secondButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondButtonActionPerformed(evt);
            }
        });
        getContentPane().add(secondButton);
        secondButton.setBounds(450, 40, 140, 23);

        randomwAT.setText("Randomize with 0 AT");
        randomwAT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomwATActionPerformed(evt);
            }
        });
        getContentPane().add(randomwAT);
        randomwAT.setBounds(450, 130, 150, 23);

        randomC.setText("Randomize Completely");
        randomC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomCActionPerformed(evt);
            }
        });
        getContentPane().add(randomC);
        randomC.setBounds(40, 130, 150, 23);

        random.setText("Randomize inc AT");
        random.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomActionPerformed(evt);
            }
        });
        getContentPane().add(random);
        random.setBounds(240, 130, 150, 23);

        stats.setText("STATS");
        stats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsActionPerformed(evt);
            }
        });
        getContentPane().add(stats);
        stats.setBounds(400, 130, 200, 23);

        tQuantum.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        getContentPane().add(tQuantum);
        tQuantum.setBounds(289, 40, 150, 20);

        backB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/backB.png"))); // NOI18N
        backB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backBMouseExited(evt);
            }
        });
        getContentPane().add(backB);
        backB.setBounds(10, 2, 26, 23);

        minB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/minB.png"))); // NOI18N
        minB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minBMouseExited(evt);
            }
        });
        getContentPane().add(minB);
        minB.setBounds(40, 2, 26, 23);

        closeB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/closeB.png"))); // NOI18N
        closeB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeBMouseExited(evt);
            }
        });
        getContentPane().add(closeB);
        closeB.setBounds(70, 2, 26, 23);

        handle.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                handleMouseDragged(evt);
            }
        });
        handle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                handleMousePressed(evt);
            }
        });
        getContentPane().add(handle);
        handle.setBounds(0, 0, 1360, 13);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bg()
    {
        schedbg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        schedbg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/schedbg.png"))); // NOI18N
        schedbg.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(schedbg);
        schedbg.setBounds(0, 0, 1360, 801);
    }
    private void firstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstButtonActionPerformed
        scheduleType.setEnabled(false);
        processNumber.setEnabled(false);
        firstButton.setVisible(false);
        secondButton.setVisible(true);
        random.setVisible(true);
        randomwAT.setVisible(true);
        randomC.setVisible(true);
        if(scheduleType.getSelectedIndex()==2 || scheduleType.getSelectedIndex()==4 || scheduleType.getSelectedIndex()==5)
        {
                bRand = 5;
        }
        for(int i=0;i<processNumber.getValue();i++)
        {
            if(scheduleType.getSelectedIndex()==3 || scheduleType.getSelectedIndex()==4)
            {
                prio[i]=new JSpinner();
                prio[i].setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
                getContentPane().add(prio[i]);
                prio[i].setBounds(420, atY, 140, 30);
                px = 20;
                ax = 120;
                bx = 270;
            }
            pLabel[i] = new JLabel();
            pLabel[i].setText("P"+(i+1));
            pLabel[i].setForeground(new java.awt.Color(255, 255, 255));
            getContentPane().add(pLabel[i]);
            pLabel[i].setBounds(px, atY, 80, 30);

            at[i]=new JSpinner();
            at[i].setModel(new javax.swing.SpinnerNumberModel(0, 0, 50, 1));
            getContentPane().add(at[i]);
            at[i].setBounds(ax, atY, 140, 30);

            bt[i]=new JSpinner();
            bt[i].setModel(new javax.swing.SpinnerNumberModel(0, 0, 50, 1));
            getContentPane().add(bt[i]);
            bt[i].setBounds(bx, atY, 140, 30);
            
            atY+=30;
            if(atY>=xy)
            {
                xy+=50;
                this.setSize(xx,xy);
                System.out.println(xy);
            }
        }
        bg();
    }//GEN-LAST:event_firstButtonActionPerformed

    private void secondButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondButtonActionPerformed
        secondButton.setEnabled(false);
        random.setVisible(false);
        randomwAT.setVisible(false);
        randomC.setVisible(false);
        stats.setVisible(true);
        pNum = processNumber.getValue();
        for(int i=0;i<processNumber.getValue();i++)
        {
            pLabel[i].setVisible(false);
            proNum[i] = (i+1);
            arrT[i] = (Integer) at[i].getValue();
            burT[i] = (Integer) bt[i].getValue();
            at[i].setVisible(false);
            bt[i].setVisible(false);
            if(scheduleType.getSelectedIndex()==3 || scheduleType.getSelectedIndex()==4)
            {
                prioT[i] = (Integer) prio[i].getValue();
                prio[i].setVisible(false);
            }
        }
        switch(scheduleType.getSelectedIndex())
        {
            case 0: FCFS(); break;
            case 1: SJF(); break;
            case 2: SRTF(); break;
            case 3: NPP(); break;
            case 4: PP(); break;
            case 5: RR(); break;
        }
        bg();
    }//GEN-LAST:event_secondButtonActionPerformed

    private void randomwATActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomwATActionPerformed
        for(int i=0;i<processNumber.getValue();i++)
        {
            if(scheduleType.getSelectedIndex()==3 || scheduleType.getSelectedIndex()==4)
            {
                prio[i].setModel(new javax.swing.SpinnerNumberModel( (int )(Math.random() * 10 + 1) , 1, 10, 1));
            }
            at[i].setModel(new javax.swing.SpinnerNumberModel(0, 0, 50, 1));
            
            bt[i].setModel(new javax.swing.SpinnerNumberModel((int )(Math.random() * bRand + 1), 0, 50, 1));
        }
    }//GEN-LAST:event_randomwATActionPerformed

    private void randomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomActionPerformed
        for(int i=0;i<processNumber.getValue();i++)
        {
            if(scheduleType.getSelectedIndex()==3 || scheduleType.getSelectedIndex()==4)
            {
                prio[i].setModel(new javax.swing.SpinnerNumberModel( (int )(Math.random() * 10 + 1) , 1, 10, 1));
            }
            at[i].setModel(new javax.swing.SpinnerNumberModel(i, 0, 50, 1));

            bt[i].setModel(new javax.swing.SpinnerNumberModel((int )(Math.random() * bRand + 1), 0, 50, 1));
        }
    }//GEN-LAST:event_randomActionPerformed

    private void randomCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomCActionPerformed
        for(int i=0;i<processNumber.getValue();i++)
        {
            if(scheduleType.getSelectedIndex()==3 || scheduleType.getSelectedIndex()==4)
            {
                prio[i].setModel(new javax.swing.SpinnerNumberModel( (int )(Math.random() * 10 + 1) , 1, 10, 1));
            }
            
            if(i==0)
            {
                at[i].setModel(new javax.swing.SpinnerNumberModel(0, 0, 50, 1));
            }
            else
            {
                at[i].setModel(new javax.swing.SpinnerNumberModel((int )(Math.random() * processNumber.getValue() + 1), 0, 50, 1)); 
            }
           
            bt[i].setModel(new javax.swing.SpinnerNumberModel((int )(Math.random() * bRand + 1), 0, 50, 1));
        }
    }//GEN-LAST:event_randomCActionPerformed

    private void statsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statsActionPerformed
        // TODO add your handling code here:
        Stats s = new Stats();
        for(int disp=0; disp<processNumber.getValue();disp++)
        {
            
        s.pnoLabel[disp] = new JLabel();
        s.pnoLabel[disp].setFont(new java.awt.Font("Times New Roman", 1, 18));
        s.pnoLabel[disp].setForeground(new java.awt.Color(255, 255, 255));
        s.pnoLabel[disp].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        s.pnoLabel[disp].setText("P"+Integer.toString(proNum[disp]));
        s.getContentPane().add(s.pnoLabel[disp]);
        s.pnoLabel[disp].setBounds(10, (150+(disp*30)), 70, 30);
        
        s.atLabel[disp] = new JLabel();
        s.atLabel[disp].setFont(new java.awt.Font("Times New Roman", 1, 18));
        s.atLabel[disp].setForeground(new java.awt.Color(255, 255, 255));
        s.atLabel[disp].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        s.atLabel[disp].setText(Integer.toString(arrT[disp]));
        s.getContentPane().add(s.atLabel[disp]);
        s.atLabel[disp].setBounds(100, (150+(disp*30)), 50, 30);
        
        s.btLabel[disp] = new JLabel();
        s.btLabel[disp].setFont(new java.awt.Font("Times New Roman", 1, 18));
        s.btLabel[disp].setForeground(new java.awt.Color(255, 255, 255));
        s.btLabel[disp].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        if(scheduleType.getSelectedIndex()==2 || scheduleType.getSelectedIndex()==4 || scheduleType.getSelectedIndex()==5)
        {
            s.btLabel[disp].setText(Integer.toString(iburT[disp]));
        }
        else
        {
            s.btLabel[disp].setText(Integer.toString(burT[disp]));
        }
        s.getContentPane().add(s.btLabel[disp]);
        s.btLabel[disp].setBounds(170, (150+(disp*30)), 50, 30);
        
        s.compLabel[disp] = new JLabel();
        s.compLabel[disp].setFont(new java.awt.Font("Times New Roman", 1, 18));
        s.compLabel[disp].setForeground(new java.awt.Color(255, 255, 255));
        s.compLabel[disp].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        s.compLabel[disp].setText(Integer.toString(compT[disp]));
        s.getContentPane().add(s.compLabel[disp]);
        s.compLabel[disp].setBounds(380, (150+(disp*30)), 50, 30);
        
        s.turnLabel[disp] = new JLabel();
        s.turnLabel[disp].setFont(new java.awt.Font("Times New Roman", 1, 18));
        s.turnLabel[disp].setForeground(new java.awt.Color(255, 255, 255));
        s.turnLabel[disp].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        s.turnLabel[disp].setText(Integer.toString(turnT[disp]));
        s.getContentPane().add(s.turnLabel[disp]);
        s.turnLabel[disp].setBounds(460, (150+(disp*30)), 50, 30);
        
        s.waitLabel[disp] = new JLabel();
        s.waitLabel[disp].setFont(new java.awt.Font("Times New Roman", 1, 18));
        s.waitLabel[disp].setForeground(new java.awt.Color(255, 255, 255));
        s.waitLabel[disp].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        s.waitLabel[disp].setText(Integer.toString(waitT[disp]));
        s.getContentPane().add(s.waitLabel[disp]);
        s.waitLabel[disp].setBounds(540, (150+(disp*30)), 50, 30);
        
        
        if(scheduleType.getSelectedIndex()==3 || scheduleType.getSelectedIndex()==4)
        {
            s.prioLabel[disp] = new JLabel();
            s.prioLabel[disp].setFont(new java.awt.Font("Times New Roman", 1, 18));
            s.prioLabel[disp].setForeground(new java.awt.Color(255, 255, 255));
            s.prioLabel[disp].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            s.prioLabel[disp].setText(Integer.toString(prioT[disp]));
            s.getContentPane().add(s.prioLabel[disp]);
            s.prioLabel[disp].setBounds(250, (150+(disp*30)), 70, 30);
        }
        }
        
        s.aveTurnLabel.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        s.aveTurnLabel.setForeground(new java.awt.Color(255, 255, 255));
        s.aveTurnLabel.setText(Double.toString(aveTurn));
        s.getContentPane().add(s.aveTurnLabel);
        s.aveTurnLabel.setBounds(210, 20, 120, 40);
        
        s.aveWaitLabel.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        s.aveWaitLabel.setForeground(new java.awt.Color(255, 255, 255));
        s.aveWaitLabel.setText(Double.toString(aveWait));
        s.getContentPane().add(s.aveWaitLabel);
        s.aveWaitLabel.setBounds(210, 60, 120, 40);
        
        s.statbg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        s.statbg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/statbg.png"))); // NOI18N
        s.statbg.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        s.getContentPane().add(s.statbg);
        s.statbg.setBounds(0, 0, 600, 750);
        s.setVisible(true);  
    }//GEN-LAST:event_statsActionPerformed

    private void scheduleTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleTypeActionPerformed
        // TODO add your handling code here:
        if(scheduleType.getSelectedIndex()==2 || scheduleType.getSelectedIndex()==4 || scheduleType.getSelectedIndex()==5 )
        {
            processNumber.setMaximum(5);
        }
        else
        {
            processNumber.setMaximum(20);
        }
        if(scheduleType.getSelectedIndex()==5)
        {
            scheduleType.setBounds(40, 40, 240, 20);
            tQuantum.setVisible(true);
        }
        else
        {
            scheduleType.setBounds(40, 40, 400, 20);
            tQuantum.setVisible(false);
        }
    }//GEN-LAST:event_scheduleTypeActionPerformed

    private void backBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBMouseClicked
        Main m = new Main();
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backBMouseClicked

    private void backBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBMouseEntered
        // TODO add your handling code here:
        backB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/backB-H.png")));
    }//GEN-LAST:event_backBMouseEntered

    private void backBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBMouseExited
        // TODO add your handling code here:
        backB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/backB.png")));
    }//GEN-LAST:event_backBMouseExited

    private void handleMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handleMouseDragged
        int movx = evt.getXOnScreen();
        int movy = evt.getYOnScreen();
        this.setLocation(movx - posX, movy - posY);
    }//GEN-LAST:event_handleMouseDragged

    private void handleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handleMousePressed
        posX = evt.getX();
        posY = evt.getY();
    }//GEN-LAST:event_handleMousePressed

    private void minBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minBMouseClicked
        this.setState(Member.ICONIFIED);
    }//GEN-LAST:event_minBMouseClicked

    private void minBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minBMouseEntered
        minB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/minB-H.png")));
    }//GEN-LAST:event_minBMouseEntered

    private void minBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minBMouseExited
        minB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/minB.png")));
    }//GEN-LAST:event_minBMouseExited

    private void closeBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeBMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeBMouseClicked

    private void closeBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeBMouseEntered
        closeB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/closeB-H.png")));
    }//GEN-LAST:event_closeBMouseEntered

    private void closeBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeBMouseExited
        closeB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ospck/assets/closeB.png")));
    }//GEN-LAST:event_closeBMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Schedule().setVisible(true);
            }
        });
    }
    
    private void FCFS()
        {
            processSort();
            for (int b = 0; b < pNum; b++)
            {
                stat[b] = true;
                compT[b] = 0;
            }
            for( int x = 0 ; x < pNum ; x++)
            {
                if(x==0)
                {
                    compT[x] = burT[x] + arrT[x];
                }
                else
                {
                    compT[x] = burT[x] + compT[x-1];
                }
                System.out.println(""+compT[x]);
                //LAHAT NG MATITIRANG PROCESSES DITO MALALAGAY
                remain = "<html>";
                remainLabel[v] = new JLabel();
                for( int j=0 ; j<pNum ; j++)
                {
                    if(stat[j])
                    {
                        
                        if(x==0)
                        {
                            if(j==0)
                            remain+="<font face=\"Georgia\" color = \"#5dddd7\"><b>P"+proNum[x]+"</b></font><br>";
                        }
                        else if(arrT[j]<=compT[x-1])
                        {   
                            System.out.println(arrT[j]+"+"+compT[x]);
                            if(j==x)
                            {
                                remain+="<font face=\"Georgia\" color = \"#5dddd7\"><b>P"+proNum[j]+"</b></font><br>";
                            }
                            else
                            {
                                remain+="P"+proNum[j]+ "<br>";
                            }
                        }
                    }
                }
                //COMPUTATIONS FOR TURNAROUND AND WAIT TIME
                turnT[x] = compT[x] - arrT[x];
                waitT[x] = turnT[x] - burT[x];
                stat[x] = false;
                //
                
                //DISPLAY NUNG REMAINING SHITS
                remainLabel[v].setText(remain);
                remainLabel[v].setVerticalAlignment(javax.swing.SwingConstants.TOP);
                remainLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                getContentPane().add(remainLabel[v]);
                remainLabel[v].setBounds(timeJ, 210, 40, 400);
                
                //DISPLAY NUNG PICKED SHIT
                pickedLabel[v] = new JLabel();
                pickedLabel[v].setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                pickedLabel[v].setText("P"+proNum[x]);
                getContentPane().add(pickedLabel[v]);
                pickedLabel[v].setBounds(jakol, 150, 50, 30);
                pickedLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                //DISPLAY NUNG CURRENT TIME
                timeLabel[v] = new JLabel();
                if(x==0)
                {
                    timeLabel[v].setText("0");
                }
                else
                {
                    timeLabel[v].setText(""+compT[x-1]);  
                }
                getContentPane().add(timeLabel[v]);
                timeLabel[v].setBounds(timeJ, 190, 34, 14);
                timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                //INCREMENTS NUNG MGA SHIT
                v++;
                jakol+=40;
                timeJ+=40;
                if(timeJ > xx)
                {
                    xx+=105;
                    this.setSize(xx,xy);
                    System.out.println(xx);
                }
            }
            //
                timeLabel[v] = new JLabel();
                timeLabel[v].setText(""+compT[pNum-1]);  
                getContentPane().add(timeLabel[v]);
                timeLabel[v].setBounds(timeJ, 190, 34, 14);
                timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
            //INDIVIDUAL STEPS
            for (int y = 0; y < pNum; y++)
            {
                totalTurn += turnT[y];
                totalWait += waitT[y];
            }
            aveTurn = ((float)totalTurn / (float)pNum);
            aveWait = ((float)totalWait / (float)pNum);
            // tb.Text += "AVERAGE TURN-AROUND TIME: " + ((float)totalTurn / (float)pNum);
            // tb.Text += "\r\nAVERAGE WAITING TIME: " + ((float)totalWait / (float)pNum);
        }

    private void processSort()
    {
            //SORT
            for( int x = 0 ; x < pNum ; x++)
            {
                for( int y = 0 ; y < pNum ; y++)
                {
                    if( arrT[x] < arrT[y])
                    {
                        darrT = arrT[x];
                        arrT[x] = arrT[y];
                        arrT[y] = darrT;

    					dburT = burT[x];
    					burT[x] = burT[y];
    					burT[y] = dburT;

    					dproNum = proNum[x];
    					proNum[x] = proNum[y];
    					proNum[y] = dproNum;
                    }
                }
            }
    }
    
    //********************************************
        //******DDD**EEEE*N**N*N**N*IIII**SSS*********
        //******D**D*Eee**NN*N*NN*N**II**Sss**********
        //******D**D*E****N*NN*N*NN**II*****S*********
        //******DDD**EEEE*N**N*N**N*IIII*SSS**********
        //********************************************
        private void SJF()
        {  
            int dummy=0;
            int totalTime = 0;
            for(int b = 0; b < pNum ; b++)
            {
                stat[b] = true;
                iburT[b] = burT[b];
                totalTime += burT[b];
            }
            for (int a = 0; a < totalTime; )
            {
                dummy = checkprocess(a);
                
                //LAHAT NG NATITIRANG PROCESSES DITO NAILALAGAY
                remain = "<html>";
                remainLabel[v] = new JLabel();
                for( int j=0 ; j<pNum ; j++)
                {
                    if(stat[j])
                    {
                        if(arrT[j]<=a)
                        {
                            if(j==dummy)
                            {
                                remain+="<font face=\"Georgia\" color = \"#5dddd7\"><b>P"+proNum[j]+"("+ burT[j] + ")</b></font><br>";
                            }
                            else
                            {
                                remain+="P"+proNum[j]+"("+ burT[j] + ")<br>";
                            }
                        }
                    }
                }
                remain+= "</html>";
                //
                
                //DISPLAY NUNG CURRENT TIME
                timeLabel[v] = new JLabel();
                if(a==0)
                {
                    timeLabel[v].setText("0");
                }
                else
                {
                    timeLabel[v].setText(""+a);  
                }
                getContentPane().add(timeLabel[v]);
                timeLabel[v].setBounds(timeJ, 190, 34, 14);
                timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                a += burT[dummy];
                compT[dummy] = a;
                turnT[dummy] = compT[dummy] - arrT[dummy];
                waitT[dummy] = turnT[dummy] - burT[dummy];
                stat[dummy] = false;
                
                //DISPLAY NUNG REMAINING SHITS
                remainLabel[v].setText(remain);
                remainLabel[v].setVerticalAlignment(javax.swing.SwingConstants.TOP);
                getContentPane().add(remainLabel[v]);
                remainLabel[v].setBounds(timeJ, 210, 60, 400);
                remainLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                //DISPLAY NUNG PICKED SHIT
                pickedLabel[v] = new JLabel();
                pickedLabel[v].setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                pickedLabel[v].setText("P"+proNum[dummy]);
                getContentPane().add(pickedLabel[v]);
                pickedLabel[v].setBounds(jakol, 150, 50, 30);
                pickedLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                //INCREMENTS NUNG MGA SHIT
                v++;
                jakol+=60;
                timeJ+=60;
                if(timeJ > xx)
                {
                    xx+=95;
                    this.setSize(xx,xy);
                    System.out.println(xx);
                }
            }
            //
                timeLabel[v] = new JLabel();
                timeLabel[v].setText(""+compT[dummy]);  
                getContentPane().add(timeLabel[v]);
                timeLabel[v].setBounds(timeJ, 190, 34, 14);
                timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
            for (int y = 0; y < pNum; y++)
            {
                totalTurn += turnT[y];
                totalWait += waitT[y];
            }
            //AVERAGES
            aveTurn = ((float)totalTurn / (float)pNum);
            aveWait = ((float)totalWait / (float)pNum);
        }

        private int checkprocess(int time)
        { 
            int min = 1000;
            int p = 0;
            for (int x = 0; x < pNum; x++ )
            {
                if(arrT[x]<=time)
                {
                    if(burT[x]<min && stat[x])
                    {
                        min = burT[x];
                        p = x;
                    }
                }
            }
            return p;
        }
        //********************************************
        //******DDD**EEEE*N**N*N**N*IIII**SSS*********
        //******D**D*Eee**NN*N*NN*N**II**Sss**********
        //******D**D*E****N*NN*N*NN**II*****S*********
        //******DDD**EEEE*N**N*N**N*IIII*SSS**********
        //********************************************
        private void SRTF()
        {
            int dummy = 0;
            int totalTime = 0;
            for (int b = 0; b < pNum; b++)
            {
                stat[b] = true;
                iburT[b] = burT[b];
                totalTime += burT[b];
            }
            for (int a = 0; a < totalTime; a++ )
            {
                dummy = checkprocess(a);
                
                //LAHAT NG NATITIRANG PROCESSES DITO NAILALAGAY
                remain = "<html>";
                remainLabel[v] = new JLabel();
                for( int j=0 ; j<pNum ; j++)
                {
                    if(stat[j])
                    {
                        if(arrT[j]<=a)
                        {
                            if(j==dummy)
                            {
                                remain+="<font face=\"Georgia\" color = \"#5dddd7\"><b>P"+proNum[j]+"("+ burT[j] + ")</b></font><br>";
                            }
                            else
                            {
                                remain+="P"+proNum[j]+"("+ burT[j] + ")<br>";
                            }
                        }
                    }
                }
                remain+= "</html>";
                //
                
                burT[dummy] = burT[dummy] - 1;
                
                
                //DISPLAY NUNG CURRENT TIME
                timeLabel[v] = new JLabel();
                if(a==0)
                {
                    timeLabel[v].setText("0");
                }
                else
                {
                    timeLabel[v].setText(""+a);  
                }
                getContentPane().add(timeLabel[v]);
                timeLabel[v].setBounds(timeJ, 190, 34, 14);
                timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                //
                if (burT[dummy] == 0)
                {
                    compT[dummy] = a+1;
                    turnT[dummy] = compT[dummy] - arrT[dummy];
                    waitT[dummy] = turnT[dummy] - iburT[dummy];
                    stat[dummy] = false;
                }
                
                //DISPLAY NUNG REMAINING SHITS
                remainLabel[v].setText(remain);
                remainLabel[v].setVerticalAlignment(javax.swing.SwingConstants.TOP);
                getContentPane().add(remainLabel[v]);
                remainLabel[v].setBounds(timeJ, 210, 60, 400);
                remainLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                //DISPLAY NUNG PICKED SHIT
                pickedLabel[v] = new JLabel();
                pickedLabel[v].setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                pickedLabel[v].setText("P"+proNum[dummy]);
                getContentPane().add(pickedLabel[v]);
                pickedLabel[v].setBounds(jakol, 150, 50, 30);
                pickedLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                //INCREMENTS NUNG MGA SHIT
                v++;
                jakol+=50;
                timeJ+=50;
                if(timeJ > xx)
                {
                    xx+=95;
                    this.setSize(xx,xy);
                    System.out.println(xx);
                }
                
            }
            //
                timeLabel[v] = new JLabel();
                timeLabel[v].setText(""+compT[dummy]);  
                getContentPane().add(timeLabel[v]);
                timeLabel[v].setBounds(timeJ, 190, 34, 14);
                timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
            for (int y = 0; y < pNum; y++)
            {
                totalTurn += turnT[y];
                totalWait += waitT[y];
                //COMPLETE INFO
                // tb.Text += "P" + arr[y].proNum + "| AT: " + arr[y].arrT + "| BT: " + arr[y].iburT + "| PRIORITY: " + arr[y].prioT + "| CT: " + arr[y].compT + "| TAT: " + arr[y].turnT + "| WT: " + arr[y].waitT + "\r\n";
            }
            //AVERAGES
            aveTurn = ((float)totalTurn / (float)pNum);
            aveWait = ((float)totalWait / (float)pNum);
        }
        //********************************************
        //******DDD**EEEE*N**N*N**N*IIII**SSS*********
        //******D**D*Eee**NN*N*NN*N**II**Sss**********
        //******D**D*E****N*NN*N*NN**II*****S*********
        //******DDD**EEEE*N**N*N**N*IIII*SSS**********
        //********************************************
        private void NPP()
        {
            int dummy = 0;
            int totalTime = 0;
            for (int b = 0; b < pNum; b++)
            {
                stat[b] = true;
                totalTime += burT[b];
            }
            for (int a = 0; a < totalTime; )
            {
                dummy = checkpriority(a);
                //LAHAT NG NATITIRANG PROCESSES DITO NAILALAGAY
                remain = "<html>";
                remainLabel[v] = new JLabel();
                for( int j=0 ; j<pNum ; j++)
                {
                    if(arrT[j]<=a)
                    {
                        if(stat[j])
                        {
                            if(j==dummy)
                                {
                                    remain+="<font face=\"Georgia\" color = \"#5dddd7\"><b>P"+proNum[j]+"("+ prioT[j] + ")</b></font><br>";
                                }
                                else
                                {
                                remain+="P"+proNum[j]+"("+ prioT[j] + ")<br>";
                                }
                        }
                    }
                }
                remain+= "</html>";
                //
                
                //DISPLAY NUNG CURRENT TIME
                timeLabel[v] = new JLabel();
                if(a==0)
                {
                    timeLabel[v].setText("0");
                }
                else
                {
                    timeLabel[v].setText(""+a);  
                }
                getContentPane().add(timeLabel[v]);
                timeLabel[v].setBounds(timeJ, 190, 34, 14);
                timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                //
                a += burT[dummy];
                compT[dummy] = a;
                turnT[dummy] = compT[dummy] - arrT[dummy];
                waitT[dummy] = turnT[dummy] - burT[dummy];
                stat[dummy] = false;
                
                //DISPLAY NUNG REMAINING SHITS
                remainLabel[v].setText(remain);
                remainLabel[v].setVerticalAlignment(javax.swing.SwingConstants.TOP);
                getContentPane().add(remainLabel[v]);
                remainLabel[v].setBounds(timeJ, 210, 60, 400);
                remainLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                //DISPLAY NUNG PICKED SHIT
                pickedLabel[v] = new JLabel();
                pickedLabel[v].setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                pickedLabel[v].setText("P"+proNum[dummy]);
                getContentPane().add(pickedLabel[v]);
                pickedLabel[v].setBounds(jakol, 150, 50, 30);
                pickedLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                //INCREMENTS NUNG MGA SHIT
                v++;
                jakol+=50;
                timeJ+=50;
                if(timeJ > xx)
                {
                    xx+=95;
                    this.setSize(xx,xy);
                    System.out.println(xx);
                }
            }
                timeLabel[v] = new JLabel();
                timeLabel[v].setText(""+compT[dummy]);  
                getContentPane().add(timeLabel[v]);
                timeLabel[v].setBounds(timeJ, 190, 34, 14);
                timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
            for (int y = 0; y < pNum; y++)
            {
                totalTurn += turnT[y];
                totalWait += waitT[y];
                // tb.Text += "P" + arr[y].proNum + "| AT: " + arr[y].arrT + "| BT: " + arr[y].burT + "| PRIORITY: " + arr[y].prioT + "| CT: " + arr[y].compT + "| TAT: " + arr[y].turnT + "| WT: " + arr[y].waitT + "\r\n";
            }
            //AVERAGES
            aveTurn = ((float)totalTurn / (float)pNum);
            aveWait = ((float)totalWait / (float)pNum);
        }

        private int checkpriority(int time)
        {
            int max = 0;
            int p = 0;
            for (int x = 0; x < pNum; x++)
            {
                if (arrT[x] <= time && stat[x])
                {
                    if (prioT[x] > max)
                    {
                        max = prioT[x];
                            p = x;
                    }
                }
            }
            return p;
        }
        
        //********************************************
        //******DDD**EEEE*N**N*N**N*IIII**SSS*********
        //******D**D*Eee**NN*N*NN*N**II**Sss**********
        //******D**D*E****N*NN*N*NN**II*****S*********
        //******DDD**EEEE*N**N*N**N*IIII*SSS**********
        //********************************************
        private void PP()
        {
            int dummy = 0;
            int totalTime = 0;
            for (int b = 0; b < pNum; b++)
            {
                stat[b] = true;
                iburT[b] = burT[b];
                totalTime += burT[b];
            }
            for (int a = 0; a < totalTime; a++)
            {
                dummy = checkpriority(a);
                //LAHAT NG NATITIRANG PROCESSES DITO NAILALAGAY
                remain = "<html>";
                remainLabel[v] = new JLabel();
                for( int j=0 ; j<pNum ; j++)
                {
                    if(arrT[j]<=a)
                    {
                        if(stat[j])
                        {
                            if(j==dummy)
                            {
                                remain+="<font face=\"Georgia\" color = \"#5dddd7\"><b>P"+proNum[j]+"("+ prioT[j] + ")</b></font><br>";
                            }
                            else
                            {
                                remain+="P"+proNum[j]+"("+ prioT[j] + ")<br>";
                            }
                        }
                    }
                }
                remain+= "</html>";
                //
                
                //DISPLAY NUNG CURRENT TIME
                timeLabel[v] = new JLabel();
                if(a==0)
                {
                    timeLabel[v].setText("0");
                }
                else
                {
                    timeLabel[v].setText(""+a);  
                }
                getContentPane().add(timeLabel[v]);
                timeLabel[v].setBounds(timeJ, 190, 34, 14);
                timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                //
                burT[dummy] = burT[dummy] - 1;

                if (burT[dummy] == 0)
                {
                    compT[dummy] = a + 1;
                    turnT[dummy] = compT[dummy] - arrT[dummy];
                    waitT[dummy] = turnT[dummy] - iburT[dummy];
                    stat[dummy] = false;
                }
                //DISPLAY NUNG REMAINING SHITS
                remainLabel[v].setText(remain);
                remainLabel[v].setVerticalAlignment(javax.swing.SwingConstants.TOP);
                getContentPane().add(remainLabel[v]);
                remainLabel[v].setBounds(timeJ, 210, 60, 400);
                remainLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                //DISPLAY NUNG PICKED SHIT
                pickedLabel[v] = new JLabel();
                pickedLabel[v].setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                pickedLabel[v].setText("P"+proNum[dummy]);
                getContentPane().add(pickedLabel[v]);
                pickedLabel[v].setBounds(jakol, 150, 50, 30);
                pickedLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                //INCREMENTS NUNG MGA SHIT
                v++;
                jakol+=50;
                timeJ+=50;
                if(timeJ > xx)
                {
                    xx+=95;
                    this.setSize(xx,xy);
                    System.out.println(xx);
                }
            }
                timeLabel[v] = new JLabel();
                timeLabel[v].setText(""+compT[dummy]);  
                getContentPane().add(timeLabel[v]);
                timeLabel[v].setBounds(timeJ, 190, 34, 14);
                timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
            for (int y = 0; y < pNum; y++)
            {
                totalTurn += turnT[y];
                totalWait += waitT[y];
                //COMPLETE INFO
                // tb.Text += "P" + arr[y].proNum + "| AT: " + arr[y].arrT + "| BT: " + arr[y].iburT + "| PRIORITY: " + arr[y].prioT + "| CT: " + arr[y].compT + "| TAT: " + arr[y].turnT + "| WT: " + arr[y].waitT + "\r\n";
            }
            //AVERAGES
            aveTurn = ((float)totalTurn / (float)pNum);
            aveWait = ((float)totalWait / (float)pNum);
        }
        
        private void RR()
        {     
            int TimeQuantum = (Integer) tQuantum.getValue(); // kunyare may given na 2 sa TQ
            int totalTime = 0;
            int computedTime = 0;
            int selectedPNO = 0;
            
            
            processSort();
            for (int b = 0; b < pNum; b++){
//                stat[b] = true; // hindi lahat maipapasok sa QUEUE
                iburT[b] = burT[b];
                totalTime += burT[b];
            }
            do{ //loop lang ulit paulit paulit sa buong process
                if(stat[selectedPNO]){ //kapag kasama na sa QUEUE
                    System.out.println("PNO NUMERO : " + selectedPNO);
                    System.out.println("PNO NUMERO WITH BT" + selectedPNO + " (" + burT[selectedPNO] +  ") ");
                    System.out.println("COMPUTED TIME " + computedTime + "PNO " + selectedPNO);
                    
                    //REMAIN LABEL
                    remain = "<html>";
                    remainLabel[v] = new JLabel();
                    for( int j=0 ; j<pNum ; j++)
                    {
                        if(arrT[j]<=computedTime)
                        {
                            if(stat[j])
                            {
                                if(j == selectedPNO)
                                {
                                    remain+="<font face=\"Georgia\" color = \"#5dddd7\"><b>P"+proNum[j]+"("+ burT[j] + ")</b></font><br>";
                                }
                                else
                                {
                                    remain+="P"+proNum[j]+"("+ burT[j] + ")<br>";
                                }
                            }
                        }
                    }
                    remain+= "</html>";
                    //
                    
                    for(int i = 0; i < TimeQuantum; i++){
                        if (burT[selectedPNO] != 0){
                            burT[selectedPNO]--; //paisa isang bawas lang nang TQ
                            computedTime++;
                        }
                    }
                    
                    //DISPLAY NUNG CURRENT TIME
                    timeLabel[v] = new JLabel();
                    if(computedTime==1)
                    {
                        timeLabel[v].setText("0");
                    }
                    else
                    {
                        timeLabel[v].setText(""+(computedTime-1));  
                    }
                    getContentPane().add(timeLabel[v]);
                    timeLabel[v].setBounds(timeJ, 190, 34, 14);
                    timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                    //
                    
                    //DISPLAY NUNG REMAINING SHITS
                    remainLabel[v].setText(remain);
                    remainLabel[v].setVerticalAlignment(javax.swing.SwingConstants.TOP);
                    getContentPane().add(remainLabel[v]);
                    remainLabel[v].setBounds(timeJ, 210, 60, 400);
                    remainLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                    //DISPLAY NUNG PICKED SHIT
                    pickedLabel[v] = new JLabel();
                    pickedLabel[v].setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                    pickedLabel[v].setText("P"+proNum[selectedPNO]);
                    getContentPane().add(pickedLabel[v]);
                    pickedLabel[v].setBounds(jakol, 150, 50, 30);
                    pickedLabel[v].setForeground(new java.awt.Color(255, 255, 255));
                
                    //INCREMENTS NUNG MGA SHIT
                    v++;
                    jakol+=50;
                    timeJ+=50;
                    if(timeJ > xx)
                    {
                       xx+=95;
                       this.setSize(xx,xy);
                       System.out.println(xx);
                    }
                }
                else if(!stat[selectedPNO] && arrT[selectedPNO] <= computedTime && burT[selectedPNO] != 0){
                    stat[selectedPNO] = true; //kapag never pa nakakasama QUEUE
                }
                
                if (burT[selectedPNO] == 0){ //kapag wala na laman tong PNO
                    if(stat[selectedPNO])
                    {
                        compT[selectedPNO] = computedTime;
                        turnT[selectedPNO] = compT[selectedPNO] - arrT[selectedPNO];
                        waitT[selectedPNO] = turnT[selectedPNO] - iburT[selectedPNO];
                        stat[selectedPNO] = false;
                    }
                }
                
                if(selectedPNO == pNum){
                    selectedPNO = 0;
                }else{
                    ++selectedPNO;
                }
               
            }while(computedTime < totalTime);
            
            timeLabel[v] = new JLabel();
            timeLabel[v].setText(""+totalTime);  
            getContentPane().add(timeLabel[v]);
            timeLabel[v].setBounds(timeJ, 190, 34, 14);
            timeLabel[v].setForeground(new java.awt.Color(255, 255, 255));
            
            for (int y = 0; y < pNum; y++)
            {
                totalTurn += turnT[y];
                totalWait += waitT[y];
            }
            aveTurn = ((float)totalTurn / (float)pNum);
            aveWait = ((float)totalWait / (float)pNum);
            System.out.println("Average turn_around_time : " + aveTurn);
            System.out.println("Average waiting_time     : " + aveWait);
        }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backB;
    private javax.swing.JLabel closeB;
    private javax.swing.JButton firstButton;
    private javax.swing.JLabel handle;
    private javax.swing.JLabel minB;
    private javax.swing.JSlider processNumber;
    private javax.swing.JButton random;
    private javax.swing.JButton randomC;
    private javax.swing.JButton randomwAT;
    private javax.swing.JComboBox scheduleType;
    private javax.swing.JButton secondButton;
    private javax.swing.JButton stats;
    private javax.swing.JSpinner tQuantum;
    // End of variables declaration//GEN-END:variables
}
